---
import type { Form as Props } from '~/types'
import Button from '~/components/base/Button.astro'

const { inputs, textarea, disclaimer, button = 'Log in', description = '' } = Astro.props

const handleSubmit = async (event) => {
  event.preventDefault()
  const formData = new FormData(event.target)
  const email = formData.get('email')
  const password = formData.get('password')

  try {
    const response = await fetch('/api/v2/auth/signin', {
      method: 'POST',
      body: formData,
    });

    if (!response.ok) {
      throw new Error('Network response was not ok')
    }

    const result = await response.json()
    console.log('Success:', result)
  } catch (error) {
    console.error('Error:', error)
  }
}

---

<div class="w-full bg-white rounded-lg shadow dark:border md:mt-0 sm:max-w-md xl:p-0 dark:bg-gray-800 dark:border-gray-700">
  <div class="p-6 space-y-4 md:space-y-6 sm:p-8">
    <form
      action="/api/v1/auth/signin"
      class="grid grid-cols-1 gap-3 w-full"
      method="post"
      enctype="application/x-www-form-urlencoded"
    >
      {
        inputs &&
          inputs.map(
            ({ type = 'text', name, label = '', autocomplete = 'on', placeholder = '' }) =>
              name && (
                <div>
                  {label && (
                    <label for={name} class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
                      {label}
                    </label>
                  )}
                  <input
                    type={type}
                    name={name}
                    id={name}
                    autocomplete={autocomplete}
                    placeholder={placeholder}
                    class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                    required
                  />
                </div>
              )
          )
      }

      {
        textarea && (
          <div>
            <label for={textarea.name} class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
              {textarea.label}
            </label>
            <textarea
              name={textarea.name}
              id={textarea.name}
              placeholder={textarea.placeholder}
              class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-primary-600 focus:border-primary-600 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
            ></textarea>
          </div>
        )
      }

      {
        disclaimer && (
          <div class="flex items-start">
            <div class="flex items-center h-5">
              <input
                id="disclaimer"
                name="disclaimer"
                type="checkbox"
                class="w-4 h-4 border border-gray-300 rounded bg-gray-50 focus:ring-3 focus:ring-primary-300 dark:bg-gray-700 dark:border-gray-600 dark:focus:ring-primary-600 dark:ring-offset-gray-800"
              />
            </div>
            <div class="ml-3 text-sm">
              <label for="disclaimer" class="text-gray-500 dark:text-gray-300">{disclaimer.label}</label>
            </div>
          </div>
        )
      }

      <Button type="submit" class="w-full text-white bg-primary-600 hover:bg-primary-700 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800">
        {button}
      </Button>

      {
        description && (
          <p class="text-sm font-light text-gray-500 dark:text-gray-400">
            {description}
          </p>
        )
      }
    </form>
  </div>
</div>